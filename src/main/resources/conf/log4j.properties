# rootLogger参数分别为：根Logger级别，输出器stdout，输出器log
#log4j.rootLogger=debug,info,warn,Console
#Console,info,,warn,error 
#Console
#log4j.appender.Console=org.apache.log4j.ConsoleAppender
#log4j.appender.Console.layout=org.apache.log4j.PatternLayout
#log4j.appender.Console.layout.ConversionPattern=%d{HH:mm:ss} %-5p [%c] - %m%n

##info log
#log4j.logger.info=info
#log4j.appender.info=org.apache.log4j.DailyRollingFileAppender 
#log4j.appender.info.DatePattern='_'yyyy-MM-dd'.log'
#log4j.appender.info.File=E:/apache-tomcat-8.0.53/logs/hp/log/info.log
#log4j.appender.info.Append=true
#log4j.appender.info.Threshold=INFO
#log4j.appender.info.layout=org.apache.log4j.PatternLayout 
#log4j.appender.info.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss a} [Thread: %t][ Class:%c >> Method: %l ]%n%p:%m%n
##debug log
#log4j.logger.debug=debug
#log4j.appender.debug=org.apache.log4j.DailyRollingFileAppender 
#log4j.appender.debug.DatePattern='_'yyyy-MM-dd'.log'
##log4j.appender.debug.File=./src/com/hp/log/info.log
#log4j.appender.debug.File=E:/apache-tomcat-8.0.53/logs/hp/log/debug.log
#log4j.appender.debug.Append=true
#log4j.appender.debug.Threshold=DEBUG
#log4j.appender.debug.layout=org.apache.log4j.PatternLayout 
#log4j.appender.debug.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss a} [Thread: %t][ Class:%c >> Method: %l ]%n%p:%m%n
#warn log
#log4j.logger.warn=warn
#log4j.appender.warn=org.apache.log4j.DailyRollingFileAppender
#log4j.appender.warn.DatePattern='_'yyyy-MM-dd'.log'
#log4j.appender.warn.File=E:/apache-tomcat-8.0.53/logs/hp/log/warn.log
#log4j.appender.warn.Append=true
#log4j.appender.warn.Threshold=WARN
#log4j.appender.warn.layout=org.apache.log4j.PatternLayout
#log4j.appender.warn.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss a} [Thread: %t][ Class:%c >> Method: %l ]%n%p:%m%n
##error
#log4j.logger.error=error
#log4j.appender.error = org.apache.log4j.DailyRollingFileAppender
#log4j.appender.error.DatePattern='_'yyyy-MM-dd'.log'
#log4j.appender.error.File = E:/apache-tomcat-8.0.53/logs/hp/log/error.log 
#log4j.appender.error.Append = true
#log4j.appender.error.Threshold = ERROR 
#log4j.appender.error.layout = org.apache.log4j.PatternLayout
#log4j.appender.error.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss a} [Thread: %t][ Class:%c >> Method: %l ]%n%p:%m%n
#sql语句
#log4j.logger.java.sql.ResultSet=INFO
#log4j.logger.org.apache=INFO
#log4j.logger.java.sql.Connection=DEBUG
#log4j.logger.java.sql.Statement=DEBUG
#log4j.logger.java.sql.PreparedStatement=DEBUG

#日志记录器（Logger）的行为是分等级的。如下表所示：分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL
#或者您定义的级别，这些级别是从高到低的级别。
#Log4j建议只使用四个级别，优先级从高到低分别是 ERROR、WARN、INFO、DEBUG。
#<!-- ========================== 自定义输出格式说明================================ -->
#			%m   输出代码中指定的消息
#      <!-- %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL -->
#      <!-- %r 输出自应用启动到输出该log信息耗费的毫秒数  -->
#      <!-- %c 输出所属的类目，通常就是所在类的全名 -->
#      <!-- %t 输出产生该日志事件的线程名 -->
#      <!-- %n 输出一个回车换行符，Windows平台为“/r/n”，Unix平台为“/n” -->
#      <!-- %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921  -->
#      <!-- %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlo4.main(TestLog4.java:10)  -->
#      <!-- ========================================================================== -->
# 
#      <!-- ========================== 输出方式说明================================ -->
#      <!-- Log4j提供的appender有以下几种:  -->
#      <!-- org.apache.log4j.ConsoleAppender(控制台),  -->
#      <!-- org.apache.log4j.FileAppender(文件),  -->
#      <!-- org.apache.log4j.DailyRollingFileAppender(每天产生一个日志文件), -->
#      <!-- org.apache.log4j.RollingFileAppender(文件大小到达指定尺寸的时候产生一个新的文件),  -->
#      <!-- org.apache.log4j.WriterAppender(将日志信息以流格式发送到任意指定的地方)   -->
#  <!-- ========================================================================== -->